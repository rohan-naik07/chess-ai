#!/usr/bin/env node

/**
 * Module dependencies.
 */
(async ()=>{
  var app = require('../app');
  var debug = require('debug')('backend:server');
  var http = require('http');
  const { Server } = require("socket.io");
  const mongoose = require('mongoose')
  const dbURL = `mongodb://localhost:27017/test`;
  /**
   * Get port from environment and store in Express.
   */
  
  var port = normalizePort(process.env.PORT || '7000');
  app.set('port', port);
  try {
    await mongoose.connect(dbURL);
    //mongoose.connection.db.dropDatabase(function(err, result) {console.log(result)});
  } catch (error) {
    console.log(error)
  }
  
  /**
   * Create HTTP server.
   */
  
  var server = http.createServer(app);
  const io = new Server(server,{
    cors: {
      origin: "http://localhost:3000"
    }
  });
  
  io.on("connection", (socket) => {
    // ...
    console.log('connected')
    socket.on("move",function(args){

    })
    socket.on("undo",function(args){

    })
    socket.on("abandon",function(args){

    })
  });
  
  /**
   * Listen on provided port, on all network interfaces.
   */
  
  server.listen(port,()=>console.log(port));
  server.on('error', onError);
  server.on('listening', onListening);
  
  /**
   * Normalize a port into a number, string, or false.
   */
  
  function normalizePort(val) {
    var port = parseInt(val, 10);
  
    if (isNaN(port)) {
      // named pipe
      return val;
    }
  
    if (port >= 0) {
      // port number
      return port;
    }
  
    return false;
  }
  
  /**
   * Event listener for HTTP server "error" event.
   */
  
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
  
    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;
  
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
  
  /**
   * Event listener for HTTP server "listening" event.
   */
  
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
})();

